#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace FlowActivationOrder.Models
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'System.Text.Json' then do:
    //
    //    using Common.Models;
    //
    //    var workflowObject = WorkflowObject.FromJson(jsonString);

    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class WorkflowObject
    {
        [JsonPropertyName("properties")]
        public Properties Properties { get; set; }

        [JsonPropertyName("schemaVersion")]
        public string SchemaVersion { get; set; }
    }

    public partial class Properties
    {
        [JsonPropertyName("connectionReferences")]
        public ConnectionReferences ConnectionReferences { get; set; }

        [JsonPropertyName("definition")]
        public WorkflowDefinition Definition { get; set; }

        [JsonPropertyName("templateName")]
        public string TemplateName { get; set; }
    }

    public partial class ConnectionReferences
    {
    }

    public partial class WorkflowObject
    {
        public static WorkflowObject FromJson(string json) => JsonSerializer.Deserialize<WorkflowObject>(json, WorkflowObjectConverter.Settings);
    }

    public static class WorkflowObjectSerialize
    {
        public static string ToJson(this WorkflowObject self) => JsonSerializer.Serialize(self, WorkflowObjectConverter.Settings);
    }

    internal static class WorkflowObjectConverter
    {
        public static readonly JsonSerializerOptions Settings = new JsonSerializerOptions(JsonSerializerDefaults.General)
        {
            Converters =
            {
                    new WorkflowDefinitionConverterInternal(),
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class WorkflowDefinitionConverterInternal : JsonConverter<WorkflowDefinition>
    {

        public WorkflowDefinitionConverterInternal() { }

        public override WorkflowDefinition Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
        {
            using (var jsonDoc = JsonDocument.ParseValue(ref reader))
            {
                var value = jsonDoc.RootElement.GetRawText();

                return WorkflowDefinition.FromJson(value);
            }
        }

        public override void Write(Utf8JsonWriter writer, WorkflowDefinition value, JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToJson());
        }
    }

}

#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
